#if ! (UNITY_DASHBOARD_WIDGET || UNITY_WEBPLAYER || UNITY_WII || UNITY_NACL || UNITY_FLASH || UNITY_BLACKBERRY) // Disable under unsupported platforms.
/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class AkChannelConfig : IDisposable {
  private IntPtr swigCPtr;
  protected bool swigCMemOwn;

  internal AkChannelConfig(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  internal static IntPtr getCPtr(AkChannelConfig obj) {
    return (obj == null) ? IntPtr.Zero : obj.swigCPtr;
  }

  ~AkChannelConfig() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          AkSoundEnginePINVOKE.CSharp_delete_AkChannelConfig(swigCPtr);
        }
        swigCPtr = IntPtr.Zero;
      }
      GC.SuppressFinalize(this);
    }
  }

  public uint uNumChannels {
    set {
      AkSoundEnginePINVOKE.CSharp_AkChannelConfig_uNumChannels_set(swigCPtr, value);
    } 
    get {
      uint ret = AkSoundEnginePINVOKE.CSharp_AkChannelConfig_uNumChannels_get(swigCPtr);
      return ret;
    } 
  }

  public uint eConfigType {
    set {
      AkSoundEnginePINVOKE.CSharp_AkChannelConfig_eConfigType_set(swigCPtr, value);
    } 
    get {
      uint ret = AkSoundEnginePINVOKE.CSharp_AkChannelConfig_eConfigType_get(swigCPtr);
      return ret;
    } 
  }

  public uint uChannelMask {
    set {
      AkSoundEnginePINVOKE.CSharp_AkChannelConfig_uChannelMask_set(swigCPtr, value);
    } 
    get {
      uint ret = AkSoundEnginePINVOKE.CSharp_AkChannelConfig_uChannelMask_get(swigCPtr);
      return ret;
    } 
  }

  public AkChannelConfig() : this(AkSoundEnginePINVOKE.CSharp_new_AkChannelConfig__SWIG_0(), true) {
  }

  public AkChannelConfig(uint in_uChannelMask) : this(AkSoundEnginePINVOKE.CSharp_new_AkChannelConfig__SWIG_1(in_uChannelMask), true) {
  }

  public void Clear() {
    AkSoundEnginePINVOKE.CSharp_AkChannelConfig_Clear(swigCPtr);
  }

  public void SetStandard(uint in_uChannelMask) {
    AkSoundEnginePINVOKE.CSharp_AkChannelConfig_SetStandard(swigCPtr, in_uChannelMask);
  }

  public void SetStandardOrAnonymous(uint in_uNumChannels, uint in_uChannelMask) {
    AkSoundEnginePINVOKE.CSharp_AkChannelConfig_SetStandardOrAnonymous(swigCPtr, in_uNumChannels, in_uChannelMask);
  }

  public void SetAnonymous(uint in_uNumChannels) {
    AkSoundEnginePINVOKE.CSharp_AkChannelConfig_SetAnonymous(swigCPtr, in_uNumChannels);
  }

  public void SetAmbisonic(uint in_uNumChannels) {
    AkSoundEnginePINVOKE.CSharp_AkChannelConfig_SetAmbisonic(swigCPtr, in_uNumChannels);
  }

  public bool IsValid() {
    bool ret = AkSoundEnginePINVOKE.CSharp_AkChannelConfig_IsValid(swigCPtr);
    return ret;
  }

  public void Serialize(out uint out_uChannelConfig) {
    AkSoundEnginePINVOKE.CSharp_AkChannelConfig_Serialize(swigCPtr, out out_uChannelConfig);
  }

  public void Deserialize(uint in_uChannelConfig) {
    AkSoundEnginePINVOKE.CSharp_AkChannelConfig_Deserialize(swigCPtr, in_uChannelConfig);
  }

  public AkChannelConfig RemoveLFE() {
    AkChannelConfig ret = new AkChannelConfig(AkSoundEnginePINVOKE.CSharp_AkChannelConfig_RemoveLFE(swigCPtr), true);
    return ret;
  }

  public AkChannelConfig RemoveCenter() {
    AkChannelConfig ret = new AkChannelConfig(AkSoundEnginePINVOKE.CSharp_AkChannelConfig_RemoveCenter(swigCPtr), true);
    return ret;
  }

  public bool IsChannelConfigSupported() {
    bool ret = AkSoundEnginePINVOKE.CSharp_AkChannelConfig_IsChannelConfigSupported(swigCPtr);
    return ret;
  }

}
#endif // #if ! (UNITY_DASHBOARD_WIDGET || UNITY_WEBPLAYER || UNITY_WII || UNITY_NACL || UNITY_FLASH || UNITY_BLACKBERRY) // Disable under unsupported platforms.